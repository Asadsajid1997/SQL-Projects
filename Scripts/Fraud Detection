-- selecting only buyers who have more than 10 orders for this analysis
DROP TABLE IF EXISTS buyerids_for_data_all;
CREATE TABLE buyerids_for_data_all LIFECYCLE 7 AS
select concat(venture, "_", buyer_id) buyer_id, count(distinct order_number) total_orders from daraz_cdm.dwd_drz_trd_core_df
where ds = MAX_PT('daraz_cdm.dwd_drz_trd_core_df')
-- and TO_CHAR(fulfillment_create_date,'yyyymmdd') >= '20230101'
-- and TO_CHAR(fulfillment_create_date,'yyyymmdd') < '20231101'
and delivery_date is not null
and return_complete_date is null
group by concat(venture, "_", buyer_id)
having count(distinct order_number)>10;

-- calculating rejection rate per buyer
DROP TABLE IF EXISTS rejection_orders_rollup_10;
CREATE TABLE rejection_orders_rollup_10 LIFECYCLE 7 AS           
select coalesce(month_,'All') as month_, coalesce(venture, 'All') venture, 
coalesce(CategoryL1, 'All') CategoryL1,  coalesce(logistic_partner, 'All') logistic_partner, 
coalesce(payment_method, 'All') payment_method, buyer_id,
total_orders,
rejected_orders,
returned_orders,
rejection_rate
from (
select coalesce(month_,'All') as month_, coalesce(venture, 'All') venture, 
coalesce(regional_category1_name, 'All') CategoryL1, coalesce(logistic_partner, 'All') logistic_partner, 
coalesce(payment_method, 'All') payment_method, buyer_id,
count(distinct order_number) as total_orders,
count(distinct(case when failed_delivery_reason = 'customer_refuses_delivery' then order_number end)) rejected_orders,
count(distinct(case when return_complete_date is not null then order_number end)) returned_orders,
ROUND(count(distinct(case when failed_delivery_reason = 'customer_refuses_delivery' then order_number end))
/count(distinct order_number),4) as rejection_rate
from (
select month_, fulfillment_create_date, venture, regional_category1_name, buyer_id,
order_number, return_complete_date, payment_method, platform_order_number, logistic_partner, lvl1_delivery_failed_ts, third_failed_delivery_reason,   
lvl1_current_status, tracking_number, failed_delivery_reason 
from (
(select TO_CHAR(fulfillment_create_date,'yyyymm') as month_, fulfillment_create_date, venture, regional_category1_name, concat(venture, "_", buyer_id) buyer_id,
order_number, return_complete_date, case when payment_method = 'COD' then 'COD' else 'Prepaid' end as payment_method
from daraz_cdm.dwd_drz_trd_core_df
WHERE ds = MAX_PT('daraz_cdm.dwd_drz_trd_core_df')
and TO_CHAR(fulfillment_create_date,'yyyymmdd') >= '20230101'
and TO_CHAR(fulfillment_create_date,'yyyymmdd') < '20231101'
and concat(venture, "_", buyer_id) in (select buyer_id from buyerids_for_data where total_orders > 10)) a
INNER JOIN
(select platform_order_number, CASE   WHEN TOLOWER(fm_3pl_name) LIKE '%dex%' THEN 'DEX'
                                WHEN TOLOWER(fm_3pl_name) LIKE '%shop%' THEN 'DEX'
                                WHEN TOLOWER(fm_3pl_name) LIKE '%lmp%' THEN 'LMP'
                                ELSE '3PL' end as logistic_partner, lvl1_delivery_failed_ts, third_failed_delivery_reason,   
                                lvl1_current_status, tracking_number,
REPLACE(REPLACE(REPLACE(COALESCE(

            3pl_final_failed_delivery_reason

           ,3pl_third_failed_delivery_reason

           ,3pl_second_failed_delivery_reason

           ,3pl_first_failed_delivery_reason

       )

       ,',',' '),'\r',' '),'\n',' ') 

        as failed_delivery_reason
FROM  drzops_cdm.dwd_drz_lgt_dlv_pkg_df
where ds = MAX_PT('drzops_cdm.dwd_drz_lgt_dlv_pkg_df')) b
on a.order_number = b.platform_order_number
))
group by rollup(month_), rollup(venture), rollup(regional_category1_name), rollup(logistic_partner), rollup(payment_method), buyer_id
)
;

-- Creating the rejection rate brackets to classify our buyers into those rejection rates
DROP TABLE IF EXISTS rejection_rate_rollup_10;
CREATE TABLE rejection_rate_rollup_10 LIFECYCLE 7 AS   
select  month_, venture, categoryl1, 
logistic_partner, payment_method, 
case when rejection_rate <= 0.10 then '10' 
        when rejection_rate <= 0.20 then '20'
        when rejection_rate <= 0.30 then '30'
        when rejection_rate <= 0.40 then '40'
        when rejection_rate <= 0.50 then '50'
        when rejection_rate <= 0.60 then '60'
        when rejection_rate <= 0.70 then '70'
        when rejection_rate <= 0.80 then '80'
        when rejection_rate <= 0.90 then '90'
        when rejection_rate <= 1 then '100' end rejection_rate_brackets, 
count(distinct buyer_id) as num_of_customers
from rejection_orders_rollup_10 
group by month_, venture, categoryl1, 
logistic_partner, payment_method, rejection_rate_brackets;

-- Calculating Failed Delivery rate per buyer
DROP TABLE IF EXISTS other_KPIs_rollup_10;
CREATE TABLE other_KPIs_rollup_10 LIFECYCLE 7 AS 
Select * from ( 
select *, ROW_NUMBER() over (partition by  month_,	venture,	categoryl1,	logistic_partner,	payment_method order by total_orders desc) rn 
FROM (    
select coalesce(month_,'All') as month_, coalesce(venture, 'All') venture, 
coalesce(regional_category1_name, 'All') CategoryL1, coalesce(logistic_partner, 'All') logistic_partner, 
coalesce(payment_method, 'All') payment_method, 
count(distinct order_number) as total_orders,
count(distinct order_number)/count(distinct buyer_id) as orders_per_customer,
count(distinct(CASE WHEN lvl1_current_status IN ('delivery_failed','on_the_way_back_to_shipper','returned_to_shipper') THEN tracking_number ELSE NULL END)) FD,
Round(count(distinct(CASE WHEN lvl1_current_status IN ('delivery_failed','on_the_way_back_to_shipper','returned_to_shipper') THEN tracking_number ELSE NULL END))
        /
        count(distinct tracking_number), 4) as FD_rate,
count(distinct(CASE WHEN attempts = '1st' AND lvl1_current_status = 'delivered' THEN tracking_number ELSE NULL END)) delivered_in_first_attempt,
round(count(CASE WHEN attempts = '1st' AND lvl1_current_status = 'delivered' THEN tracking_number ELSE NULL END)
        /((count(CASE WHEN attempts = '1st' THEN tracking_number ELSE NULL END))
          +  (count(CASE WHEN attempts = '2nd' THEN tracking_number ELSE NULL END))
          +  (count(CASE WHEN attempts = '3rd' THEN tracking_number ELSE NULL END))), 4) as First_attempt_success_rate

from (
select month_, fulfillment_create_date, venture, regional_category1_name, buyer_id,
order_number, return_complete_date, payment_method, platform_order_number, logistic_partner, lvl1_delivery_failed_ts, third_failed_delivery_reason,   
lvl1_current_status, tracking_number, failed_delivery_reason, 1st_attempt, 2nd_attempt, delivered,
CASE WHEN 1st_attempt = delivered THEN '1st'
     WHEN 1st_attempt IS NOT NULL AND 2nd_attempt IS NULL THEN '2nd'
     WHEN 1st_attempt IS NOT NULL AND 2nd_attempt IS NOT NULL THEN '3rd'
     WHEN 1st_attempt IS NULL AND 2nd_attempt IS NOT NULL THEN 'Others'
     ELSE 'Others'
     END AS attempts
from (
(select TO_CHAR(fulfillment_create_date,'yyyymm') as month_, fulfillment_create_date, venture, regional_category1_name, 
order_number, return_complete_date, case when payment_method = 'COD' then 'COD' else 'Prepaid' end as payment_method, concat(venture, "_", buyer_id) buyer_id
from daraz_cdm.dwd_drz_trd_core_df
WHERE ds = MAX_PT('daraz_cdm.dwd_drz_trd_core_df')
and TO_CHAR(fulfillment_create_date,'yyyymmdd') >= '20230101'
and TO_CHAR(fulfillment_create_date,'yyyymmdd') < '20231101'
and concat(venture, "_", buyer_id) in (select buyer_id from buyerids_for_data where total_orders > 10)) a
INNER JOIN
(select platform_order_number, CASE   WHEN TOLOWER(fm_3pl_name) LIKE '%dex%' THEN 'DEX'
                                WHEN TOLOWER(fm_3pl_name) LIKE '%shop%' THEN 'DEX'
                                WHEN TOLOWER(fm_3pl_name) LIKE '%lmp%' THEN 'LMP'
                                ELSE '3PL' end as logistic_partner, lvl1_delivery_failed_ts, third_failed_delivery_reason,   
                                lvl1_current_status, tracking_number,
REPLACE(REPLACE(REPLACE(COALESCE(

            3pl_final_failed_delivery_reason

           ,3pl_third_failed_delivery_reason

           ,3pl_second_failed_delivery_reason

           ,3pl_first_failed_delivery_reason

       )

       ,',',' '),'\r',' '),'\n',' ') 

        as failed_delivery_reason,
CASE   WHEN venture = 'BD' THEN from_unixtime(unix_timestamp(coalesce(lvl2_1st_attempt_failed_ts,lvl2_last_mile_customer_station_inbound_ts,lvl1_delivered_ts,lvl2_delivered_ts)) - 2 * 3600) 

                WHEN venture = 'LK' THEN from_unixtime(unix_timestamp(coalesce(lvl2_1st_attempt_failed_ts,lvl2_last_mile_customer_station_inbound_ts,lvl1_delivered_ts,lvl2_delivered_ts)) - 2.5 * 3600)

                WHEN venture = 'MM' THEN from_unixtime(unix_timestamp(coalesce(lvl2_1st_attempt_failed_ts,lvl2_last_mile_customer_station_inbound_ts,lvl1_delivered_ts,lvl2_delivered_ts)) - 1.5 * 3600)

                WHEN venture = 'NP' THEN from_unixtime(unix_timestamp(coalesce(lvl2_1st_attempt_failed_ts,lvl2_last_mile_customer_station_inbound_ts,lvl1_delivered_ts,lvl2_delivered_ts)) - 2.25 * 3600)

                WHEN venture = 'PK' THEN from_unixtime(unix_timestamp(coalesce(lvl2_1st_attempt_failed_ts,lvl2_last_mile_customer_station_inbound_ts,lvl1_delivered_ts,lvl2_delivered_ts)) - 3 * 3600) 

                ELSE coalesce(lvl2_1st_attempt_failed_ts,lvl2_last_mile_customer_station_inbound_ts,lvl1_delivered_ts,lvl2_delivered_ts)

        END AS 1st_attempt,
CASE   WHEN venture = 'BD' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_reattempts_failed_ts,lvl1_delivery_failed_ts,lvl1_on_the_way_back_to_shipper_ts,lvl1_returned_to_shipper_ts)) - 2 * 3600)

                WHEN venture = 'LK' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_reattempts_failed_ts,lvl1_delivery_failed_ts,lvl1_on_the_way_back_to_shipper_ts,lvl1_returned_to_shipper_ts)) - 2.5 * 3600)

                WHEN venture = 'MM' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_reattempts_failed_ts,lvl1_delivery_failed_ts,lvl1_on_the_way_back_to_shipper_ts,lvl1_returned_to_shipper_ts)) - 1.5 * 3600)

                WHEN venture = 'NP' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_reattempts_failed_ts,lvl1_delivery_failed_ts,lvl1_on_the_way_back_to_shipper_ts,lvl1_returned_to_shipper_ts)) - 2.15 * 3600)

                WHEN venture = 'PK' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_reattempts_failed_ts,lvl1_delivery_failed_ts,lvl1_on_the_way_back_to_shipper_ts,lvl1_returned_to_shipper_ts)) - 3 * 3600) 

                ELSE COALESCE(lvl2_reattempts_failed_ts,lvl1_delivery_failed_ts,lvl1_on_the_way_back_to_shipper_ts,lvl1_returned_to_shipper_ts)
                END AS 2nd_attempt,
CASE   when venture = 'BD' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_last_mile_customer_station_inbound_ts,lvl2_delivered_ts,lvl1_delivered_ts)) - 2 * 3600)

                when venture = 'LK' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_last_mile_customer_station_inbound_ts,lvl2_delivered_ts,lvl1_delivered_ts)) - 2.5 * 3600)

                when venture = 'MM' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_last_mile_customer_station_inbound_ts,lvl2_delivered_ts,lvl1_delivered_ts)) - 1.5 * 3600)

                when venture = 'NP' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_last_mile_customer_station_inbound_ts,lvl2_delivered_ts,lvl1_delivered_ts)) - 2.25 * 3600)

                when venture = 'PK' THEN from_unixtime(unix_timestamp(COALESCE(lvl2_last_mile_customer_station_inbound_ts,lvl2_delivered_ts,lvl1_delivered_ts)) - 3 * 3600)

                ELSE NULL END as delivered

FROM  drzops_cdm.dwd_drz_lgt_dlv_pkg_df
where ds = MAX_PT('drzops_cdm.dwd_drz_lgt_dlv_pkg_df')) b
on a.order_number = b.platform_order_number
))
group by rollup(month_), rollup(venture), rollup(regional_category1_name), rollup(logistic_partner), rollup(payment_method)
)) where rn = 1
;


-- Number of offences per buyer in each venture
DROP TABLE IF EXISTS Repeat_offenders;
CREATE TABLE Repeat_offenders LIFECYCLE 7 AS 
select venture, buyer_id, sum(offences) Number_of_offences from (
select *, (case when most_minrejectionrate <= rejection_rate_brackets and rejection_rate_brackets <> 0  then 1 else 0 end) offences 
from (
Select *, coalesce(Lag(MinRejectionRate) OVER (PARTITION BY buyer_id ORDER BY RowNum), minrejectionrate) Most_MinRejectionRate
from (
SELECT
        Month_,
        venture,
        buyer_id,
        rejection_rate_brackets,
        ROWNum,
        MIN(rejection_rate_brackets) OVER (PARTITION BY buyer_id ORDER BY RowNum) AS MinRejectionRate
    FROM (
    SELECT
        Month_,
        venture,
        buyer_id,
        rejection_rate_brackets,
        ROW_NUMBER() OVER (PARTITION BY buyer_id, venture ORDER BY Month_) AS RowNum
    FROM Repeat_offenders_10_step1))))
    group by venture, buyer_id
    order by Number_of_offences desc;


-- Repeat offence percentage in each month - base on minimum rejection bracket 
DROP TABLE IF EXISTS Repeat_offenders_10_step3;
CREATE TABLE Repeat_offenders_10_step3 LIFECYCLE 7 AS 
select month_, venture, 
count(distinct(case when most_minrejectionrate <= rejection_rate_brackets and rejection_rate_brackets <> 0  then buyer_id end))/count(distinct buyer_id),
SUM(case when most_minrejectionrate <= rejection_rate_brackets and rejection_rate_brackets <> 0  then 1 else 0 end) number_of_offences
from (
Select *, coalesce(Lag(MinRejectionRate) OVER (PARTITION BY buyer_id ORDER BY RowNum), minrejectionrate) Most_MinRejectionRate
from (
SELECT
        Month_,
        venture,
        buyer_id,
        rejection_rate_brackets,
        ROWNum,
        MIN(rejection_rate_brackets) OVER (PARTITION BY buyer_id ORDER BY RowNum) AS MinRejectionRate
    FROM (
    SELECT
        Month_,
        venture,
        buyer_id,
        rejection_rate_brackets,
        ROW_NUMBER() OVER (PARTITION BY buyer_id, venture ORDER BY Month_) AS RowNum
    FROM Repeat_offenders_10_step1)))
    group by month_, venture
    order by venture, month_ ;

select * from Repeat_offenders_10_step3
order by venture, Month_;


DROP TABLE IF EXISTS Repeat_offenders_per_month_lag_10;
CREATE TABLE Repeat_offenders_per_month_lag_10 LIFECYCLE 7 AS 
select month_, venture, count(distinct(case when rejection_rate_brackets <> 0 and rejection_rate_brackets >= last_rr then buyer_id end))/count(distinct buyer_id) from (
select month_, venture, buyer_id, rejection_rate_brackets, 
coalesce(lag(rejection_rate_brackets) OVER (PARTITION  by buyer_id, venture order by month_), rejection_rate_brackets) last_RR
from Repeat_offenders_10_step1)
group by month_, venture;
